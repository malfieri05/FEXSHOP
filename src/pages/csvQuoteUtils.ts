// Utility to parse Eagle Select CSVs and get a quote
// NOTE: These rates are used for ALL STATES (not just Michigan)
// The tables for Michigan are the national default for quoting.

const maleCSV = `AGE,5000,10000,15000,20000
60,23.46,43.12,62.78,82.44
61,24.68,45.56,66.44,87.32
62,25.90,48.00,70.11,92.21
63,26.92,50.05,73.17,96.29
64,27.94,52.09,76.23,100.38
65,28.98,54.15,79.33,104.50
66,30.44,57.08,83.72,110.36
67,31.90,60.00,88.10,116.20
68,33.39,62.98,92.57,122.16
69,35.38,66.96,98.54,130.12
70,37.37,70.94,104.50,138.07
71,39.64,75.47,111.30,147.13
72,41.90,80.00,118.10,156.20
73,44.75,85.70,126.65,167.60
74,47.60,91.40,135.20,179.00
75,50.45,97.10,143.75,190.40
76,54.18,104.55,154.93,205.30
77,57.90,112.00,166.09,220.19
78,61.86,119.59,177.32,235.05
79,65.83,127.18,188.54,249.90
80,69.79,135.78,201.78,267.77`;

const femaleCSV = `AGE,5000,10000,15000,20000
60,19.32,34.84,50.35,65.87
61,20.11,36.42,52.73,69.05
62,20.90,38.00,55.10,72.20
63,21.50,39.21,56.91,74.61
64,22.11,40.41,58.72,77.03
65,22.71,41.63,60.54,79.46
66,23.71,43.61,63.52,83.43
67,24.70,45.60,66.50,87.40
68,25.95,48.11,70.26,92.42
69,27.21,50.62,74.02,97.43
70,28.47,53.13,77.80,102.47
71,29.80,55.79,81.79,113.11
72,31.13,58.45,85.78,113.11
73,33.45,63.10,92.75,122.40
74,35.77,67.74,99.72,131.69
75,38.10,72.40,106.70,141.00
76,40.87,77.95,115.02,152.10
77,43.65,83.50,123.34,163.19
78,46.13,88.46,130.80,173.13
79,48.62,93.43,138.25,183.07
80,51.11,98.42,145.73,193.04`;

function parseCSV(csv: string) {
  const lines = csv.trim().split('\n');
  const headers = lines[0].split(',');
  return lines.slice(1).map(line => {
    const values = line.split(',');
    const row: Record<string, string> = {};
    headers.forEach((h, i) => row[h] = values[i]);
    return row;
  });
}

const maleRates = parseCSV(maleCSV);
const femaleRates = parseCSV(femaleCSV);

// Corebridge rates for Select 3 (from user image)
const select3Male = [
  { AGE: 50, 5000: 31.43, 10000: 61.88, 15000: 90.27, 20000: 119.70, 25000: 149.12 },
  { AGE: 51, 5000: 31.90, 10000: 61.79, 15000: 91.69, 20000: 121.58, 25000: 151.48 },
  { AGE: 52, 5000: 32.41, 10000: 62.71, 15000: 93.11, 20000: 123.46, 25000: 153.84 },
  { AGE: 53, 5000: 32.91, 10000: 63.81, 15000: 94.71, 20000: 135.14, 25000: 166.43 },
  { AGE: 54, 5000: 33.42, 10000: 64.91, 15000: 96.31, 20000: 137.01, 25000: 168.71 },
  { AGE: 55, 5000: 33.93, 10000: 66.01, 15000: 97.91, 20000: 138.89, 25000: 170.99 },
  { AGE: 56, 5000: 34.44, 10000: 67.11, 15000: 99.51, 20000: 140.76, 25000: 173.27 },
  { AGE: 57, 5000: 36.19, 10000: 70.37, 15000: 104.56, 20000: 155.19, 25000: 193.49 },
  { AGE: 58, 5000: 37.48, 10000: 72.97, 15000: 108.08, 20000: 160.58, 25000: 197.94 },
  { AGE: 59, 5000: 38.05, 10000: 74.09, 15000: 110.14, 20000: 162.51, 25000: 202.01 },
  { AGE: 60, 5000: 43.22, 10000: 84.44, 15000: 125.16, 20000: 164.51, 25000: 204.51 },
  { AGE: 61, 5000: 45.22, 10000: 88.44, 15000: 129.66, 20000: 171.31, 25000: 213.01 },
  { AGE: 62, 5000: 48.02, 10000: 94.18, 15000: 140.42, 20000: 187.01, 25000: 233.61 },
  { AGE: 63, 5000: 50.82, 10000: 99.93, 15000: 151.18, 20000: 202.71, 25000: 253.21 },
  { AGE: 64, 5000: 54.02, 10000: 106.43, 15000: 160.44, 20000: 213.81, 25000: 267.19 },
  { AGE: 65, 5000: 56.82, 10000: 112.93, 15000: 169.69, 20000: 224.91, 25000: 281.17 },
  { AGE: 66, 5000: 52.47, 10000: 102.93, 15000: 153.40, 20000: 226.29, 25000: 291.01 },
  { AGE: 67, 5000: 55.39, 10000: 108.93, 15000: 163.46, 20000: 241.31, 25000: 301.14 },
  { AGE: 68, 5000: 59.19, 10000: 115.36, 15000: 171.53, 20000: 241.31, 25000: 301.14 },
  { AGE: 69, 5000: 61.19, 10000: 119.36, 15000: 176.03, 20000: 249.12, 25000: 309.94 },
  { AGE: 70, 5000: 69.17, 10000: 136.34, 15000: 203.81, 20000: 279.42, 25000: 349.04 },
  { AGE: 71, 5000: 75.68, 10000: 150.11, 15000: 224.75, 20000: 299.16, 25000: 374.04 },
  { AGE: 72, 5000: 85.66, 10000: 170.80, 15000: 255.94, 20000: 342.71, 25000: 427.41 },
  { AGE: 73, 5000: 95.65, 10000: 191.50, 15000: 284.75, 20000: 371.32, 25000: 459.11 },
  { AGE: 74, 5000: 105.63, 10000: 212.20, 15000: 313.56, 20000: 399.94, 25000: 490.82 },
  { AGE: 75, 5000: 125.61, 10000: 252.80, 15000: 284.75, 20000: 417.32, 25000: 521.15 },
  { AGE: 76, 5000: 151.60, 10000: 305.80, 15000: 451.55, 20000: 564.49, 25000: 693.93 },
  { AGE: 77, 5000: 171.62, 10000: 223.80, 15000: 451.55, 20000: 564.49, 25000: 693.93 },
  { AGE: 78, 5000: 193.06, 10000: 223.80, 15000: 451.55, 20000: 564.49, 25000: 693.93 },
  { AGE: 79, 5000: 113.36, 10000: 223.80, 15000: 336.07, 20000: 452.90, 25000: 565.62 },
  { AGE: 80, 5000: 113.36, 10000: 223.80, 15000: 336.07, 20000: 452.90, 25000: 565.62 },
];

const select3Female = [
  { AGE: 50, 5000: 21.94, 10000: 41.88, 15000: 61.81, 20000: 86.79, 25000: 107.98 },
  { AGE: 51, 5000: 22.44, 10000: 42.88, 15000: 63.31, 20000: 93.14, 25000: 115.92 },
  { AGE: 52, 5000: 22.94, 10000: 43.87, 15000: 64.81, 20000: 98.14, 25000: 122.98 },
  { AGE: 53, 5000: 24.36, 10000: 46.71, 15000: 69.07, 20000: 103.53, 25000: 128.92 },
  { AGE: 54, 5000: 25.30, 10000: 48.11, 15000: 74.91, 20000: 110.02, 25000: 139.53 },
  { AGE: 55, 5000: 26.30, 10000: 50.61, 15000: 74.91, 20000: 112.02, 25000: 143.53 },
  { AGE: 56, 5000: 27.30, 10000: 53.11, 15000: 78.91, 20000: 117.02, 25000: 149.53 },
  { AGE: 57, 5000: 28.13, 10000: 54.26, 15000: 80.34, 20000: 120.03, 25000: 149.54 },
  { AGE: 58, 5000: 28.95, 10000: 55.69, 15000: 82.84, 20000: 123.06, 25000: 154.00 },
  { AGE: 59, 5000: 29.78, 10000: 57.12, 15000: 85.34, 20000: 126.09, 25000: 158.11 },
  { AGE: 60, 5000: 36.11, 10000: 70.34, 15000: 105.54, 20000: 155.19, 25000: 197.94 },
  { AGE: 61, 5000: 37.11, 10000: 72.34, 15000: 108.54, 20000: 159.19, 25000: 202.01 },
  { AGE: 62, 5000: 38.11, 10000: 74.34, 15000: 111.54, 20000: 163.19, 25000: 206.08 },
  { AGE: 63, 5000: 39.11, 10000: 76.34, 15000: 114.54, 20000: 167.19, 25000: 210.15 },
  { AGE: 64, 5000: 40.11, 10000: 78.34, 15000: 117.54, 20000: 171.19, 25000: 214.22 },
  { AGE: 65, 5000: 41.11, 10000: 80.34, 15000: 120.54, 20000: 175.19, 25000: 218.29 },
  { AGE: 66, 5000: 42.03, 10000: 82.03, 15000: 122.09, 20000: 176.45, 25000: 220.87 },
  { AGE: 67, 5000: 43.04, 10000: 84.04, 15000: 125.11, 20000: 180.45, 25000: 225.33 },
  { AGE: 68, 5000: 44.04, 10000: 86.04, 15000: 128.13, 20000: 184.45, 25000: 229.79 },
  { AGE: 69, 5000: 45.04, 10000: 88.04, 15000: 131.15, 20000: 188.45, 25000: 234.25 },
  { AGE: 70, 5000: 53.17, 10000: 104.34, 15000: 155.51, 20000: 229.99, 25000: 299.28 },
  { AGE: 71, 5000: 59.17, 10000: 116.34, 15000: 173.51, 20000: 257.99, 25000: 327.99 },
  { AGE: 72, 5000: 69.17, 10000: 136.34, 15000: 203.51, 20000: 299.99, 25000: 379.99 },
  { AGE: 73, 5000: 79.17, 10000: 156.34, 15000: 233.51, 20000: 341.99, 25000: 431.99 },
  { AGE: 74, 5000: 89.17, 10000: 176.34, 15000: 263.51, 20000: 383.99, 25000: 483.99 },
  { AGE: 75, 5000: 99.17, 10000: 196.34, 15000: 293.51, 20000: 425.99, 25000: 535.99 },
  { AGE: 76, 5000: 119.17, 10000: 236.34, 15000: 353.51, 20000: 509.99, 25000: 639.99 },
  { AGE: 77, 5000: 139.17, 10000: 276.34, 15000: 413.51, 20000: 593.99, 25000: 743.99 },
  { AGE: 78, 5000: 159.17, 10000: 316.34, 15000: 473.51, 20000: 677.99, 25000: 847.99 },
  { AGE: 79, 5000: 203.62, 10000: 308.62, 15000: 424.71, 20000: 558.76, 25000: 704.71 },
  { AGE: 80, 5000: 203.62, 10000: 308.62, 15000: 424.71, 20000: 558.76, 25000: 704.71 },
];

// Eagle Select 2 (Male) rates for all states (from user)
const select2Male = [
  { AGE: 60, 5000: 29.46, 10000: 55.13, 15000: 80.79, 20000: 106.46 },
  { AGE: 61, 5000: 31.10, 10000: 58.38, 15000: 85.18, 20000: 112.26 },
  { AGE: 62, 5000: 32.74, 10000: 61.63, 15000: 89.57, 20000: 118.06 },
  { AGE: 63, 5000: 34.38, 10000: 64.88, 15000: 93.96, 20000: 123.86 },
  { AGE: 64, 5000: 36.04, 10000: 68.14, 15000: 98.34, 20000: 129.66 },
  { AGE: 65, 5000: 37.10, 10000: 70.40, 15000: 103.71, 20000: 137.01 },
  { AGE: 66, 5000: 38.66, 10000: 73.30, 15000: 107.64, 20000: 141.14 },
  { AGE: 67, 5000: 40.22, 10000: 76.20, 15000: 111.57, 20000: 145.27 },
  { AGE: 68, 5000: 41.78, 10000: 79.10, 15000: 115.50, 20000: 149.40 },
  { AGE: 69, 5000: 43.34, 10000: 82.00, 15000: 119.43, 20000: 153.53 },
  { AGE: 70, 5000: 48.70, 10000: 93.59, 15000: 138.49, 20000: 183.39 },
  { AGE: 71, 5000: 51.29, 10000: 98.77, 15000: 146.25, 20000: 194.67 },
  { AGE: 72, 5000: 53.88, 10000: 103.95, 15000: 154.01, 20000: 205.95 },
  { AGE: 73, 5000: 56.47, 10000: 109.13, 15000: 161.77, 20000: 217.23 },
  { AGE: 74, 5000: 59.06, 10000: 114.31, 15000: 169.53, 20000: 228.51 },
  { AGE: 75, 5000: 69.05, 10000: 134.29, 15000: 199.54, 20000: 264.78 },
  { AGE: 76, 5000: 71.88, 10000: 139.41, 15000: 207.34, 20000: 276.08 },
  { AGE: 77, 5000: 74.71, 10000: 144.53, 15000: 215.14, 20000: 287.38 },
  { AGE: 78, 5000: 77.54, 10000: 149.65, 15000: 222.94, 20000: 298.68 },
  { AGE: 79, 5000: 80.27, 10000: 154.77, 15000: 230.72, 20000: 309.98 },
  { AGE: 80, 5000: 97.50, 10000: 191.20, 15000: 284.90, 20000: 267.77 },
];

// Eagle Select 2 (Female) rates for all states (from user, interpolated)
const select2Female = [
  { AGE: 60, 5000: 23.75, 10000: 43.69, 15000: 63.64, 20000: 83.58 },
  { AGE: 61, 5000: 25.16, 10000: 46.22, 15000: 67.04, 20000: 87.86 },
  { AGE: 62, 5000: 26.57, 10000: 48.75, 15000: 70.44, 20000: 92.14 },
  { AGE: 63, 5000: 27.98, 10000: 51.28, 15000: 73.84, 20000: 96.42 },
  { AGE: 64, 5000: 29.39, 10000: 53.81, 15000: 77.24, 20000: 100.70 },
  { AGE: 65, 5000: 28.80, 10000: 53.80, 15000: 78.80, 20000: 103.80 },
  { AGE: 66, 5000: 30.71, 10000: 57.01, 15000: 83.14, 20000: 109.27 },
  { AGE: 67, 5000: 32.62, 10000: 60.22, 15000: 87.48, 20000: 114.74 },
  { AGE: 68, 5000: 34.53, 10000: 63.43, 15000: 91.82, 20000: 120.21 },
  { AGE: 69, 5000: 36.44, 10000: 66.64, 15000: 96.16, 20000: 125.68 },
  { AGE: 70, 5000: 36.74, 10000: 69.67, 15000: 102.61, 20000: 135.55 },
  { AGE: 71, 5000: 40.14, 10000: 76.05, 15000: 111.34, 20000: 146.63 },
  { AGE: 72, 5000: 43.54, 10000: 82.43, 15000: 120.07, 20000: 157.71 },
  { AGE: 73, 5000: 46.94, 10000: 88.81, 15000: 128.80, 20000: 168.79 },
  { AGE: 74, 5000: 50.34, 10000: 95.19, 15000: 137.53, 20000: 179.87 },
  { AGE: 75, 5000: 51.49, 10000: 99.19, 15000: 146.88, 20000: 194.58 },
  { AGE: 76, 5000: 57.05, 10000: 109.03, 15000: 161.64, 20000: 214.25 },
  { AGE: 77, 5000: 62.61, 10000: 118.87, 15000: 176.40, 20000: 233.92 },
  { AGE: 78, 5000: 68.17, 10000: 128.71, 15000: 191.16, 20000: 253.59 },
  { AGE: 79, 5000: 72.73, 10000: 139.74, 15000: 207.21, 20000: 274.68 },
  { AGE: 80, 5000: 77.29, 10000: 150.77, 15000: 224.26, 20000: 297.75 },
];

export function getNationalQuote(gender: 'male' | 'female', age: number, coverage: number, tier: 'select1' | 'select2' | 'select3' = 'select1'): string | null {
  if (tier === 'select2') {
    const table = gender === 'male' ? select2Male : select2Female;
    const row = table.find(r => Number(r.AGE) === age);
    if (!row) return null;
    const coverages = [5000, 10000, 15000, 20000];
    if (coverages.includes(coverage)) {
      return row[String(coverage)]?.toFixed(2) || null;
    }
    // Linear interpolation for in-between values
    let lower = 5000, upper = 20000;
    for (let i = 0; i < coverages.length - 1; i++) {
      if (coverage > coverages[i] && coverage < coverages[i + 1]) {
        lower = coverages[i];
        upper = coverages[i + 1];
        break;
      }
    }
    const lowerVal = row[String(lower)];
    const upperVal = row[String(upper)];
    if (lowerVal === undefined || upperVal === undefined) return null;
    const interpolated = lowerVal + ((coverage - lower) / (upper - lower)) * (upperVal - lowerVal);
    return interpolated.toFixed(2);
  }
  if (tier === 'select3') {
    const table = gender === 'male' ? select3Male : select3Female;
    const row = table.find(r => Number(r.AGE) === age);
    if (!row) return null;
    const coverages = [5000, 10000, 15000, 20000, 25000];
    if (coverages.includes(coverage)) {
      return row[String(coverage)]?.toFixed(2) || null;
    }
    // Linear interpolation for in-between values
    let lower = 5000, upper = 25000;
    for (let i = 0; i < coverages.length - 1; i++) {
      if (coverage > coverages[i] && coverage < coverages[i + 1]) {
        lower = coverages[i];
        upper = coverages[i + 1];
        break;
      }
    }
    const lowerVal = row[String(lower)];
    const upperVal = row[String(upper)];
    if (lowerVal === undefined || upperVal === undefined) return null;
    const interpolated = lowerVal + ((coverage - lower) / (upper - lower)) * (upperVal - lowerVal);
    return interpolated.toFixed(2);
  }
  const table = gender === 'male' ? maleRates : femaleRates;
  const row = table.find(r => Number(r.AGE) === age);
  if (!row) return null;
  const coverages = [5000, 10000, 15000, 20000];
  if (coverages.includes(coverage)) {
    return row[String(coverage)] || null;
  }
  // Linear interpolation for in-between values
  let lower = 5000, upper = 20000;
  for (let i = 0; i < coverages.length - 1; i++) {
    if (coverage > coverages[i] && coverage < coverages[i + 1]) {
      lower = coverages[i];
      upper = coverages[i + 1];
      break;
    }
  }
  const lowerVal = parseFloat(row[String(lower)]);
  const upperVal = parseFloat(row[String(upper)]);
  const interpolated = lowerVal + ((coverage - lower) / (upper - lower)) * (upperVal - lowerVal);
  return interpolated.toFixed(2);
}

// Cash value tables for $5,000 coverage, age 60, from Americo PDF
const cashValues = {
  select1: [
    { year: 1, age: 61, value: 0 },
    { year: 2, age: 62, value: 17 },
    { year: 3, age: 63, value: 132 },
    { year: 4, age: 64, value: 249 },
    { year: 5, age: 65, value: 369 },
    { year: 10, age: 70, value: 1010 },
    { year: 15, age: 75, value: 1697 },
    { year: 20, age: 80, value: 2390 },
    { year: 40, age: 100, value: 4481 },
    { year: 60, age: 120, value: 5000 },
  ],
  select2: [
    { year: 1, age: 61, value: 0 },
    { year: 2, age: 62, value: 17 },
    { year: 3, age: 63, value: 132 },
    { year: 4, age: 64, value: 249 },
    { year: 5, age: 65, value: 369 },
    { year: 10, age: 70, value: 1010 },
    { year: 15, age: 75, value: 1697 },
    { year: 20, age: 80, value: 2390 },
    { year: 40, age: 100, value: 4481 },
    { year: 60, age: 120, value: 5000 },
  ],
  select3: [
    { year: 1, age: 61, value: 0 },
    { year: 2, age: 62, value: 89 },
    { year: 3, age: 63, value: 207 },
    { year: 4, age: 64, value: 327 },
    { year: 5, age: 65, value: 449 },
    { year: 10, age: 70, value: 1091 },
    { year: 15, age: 75, value: 1764 },
    { year: 20, age: 80, value: 2432 },
    { year: 40, age: 100, value: 4481 },
    { year: 60, age: 120, value: 5000 },
  ],
};

export function getCashValueTable(tier: 'select1' | 'select2' | 'select3') {
  return cashValues[tier];
} 